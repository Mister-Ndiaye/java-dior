/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package diordiouf;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.File;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Dior
 */
public class CipherSymetric extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame2
     */
    public CipherSymetric() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        formatDonnee = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        algorithm = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        encryptBtn = new javax.swing.JButton();
        decryptBtn = new javax.swing.JButton();
        generateKey = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plaintext = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        cipherText = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        secretKey = new javax.swing.JTextField();
        taille = new javax.swing.JComboBox<>();
        chooseFile = new javax.swing.JButton();
        fileName = new javax.swing.JLabel();
        texteRadioButton1 = new javax.swing.JRadioButton();
        fileRadioButton2 = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        downloadButton1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(236, 242, 242));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        algorithm.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        algorithm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AES", "DES" }));
        algorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmActionPerformed(evt);
            }
        });
        jPanel1.add(algorithm, new org.netbeans.lib.awtextra.AbsoluteConstraints(624, 106, -1, -1));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Algorithmes");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(486, 106, -1, 27));

        encryptBtn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        encryptBtn.setText("Encrypted");
        encryptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptBtnActionPerformed(evt);
            }
        });
        jPanel1.add(encryptBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 375, 140, 50));

        decryptBtn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        decryptBtn.setText("Decrypted");
        decryptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptBtnActionPerformed(evt);
            }
        });
        jPanel1.add(decryptBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 275, 140, 50));

        generateKey.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        generateKey.setText("GenKey");
        generateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateKeyActionPerformed(evt);
            }
        });
        jPanel1.add(generateKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 180, 140, 40));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Plaintext");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(574, 337, 73, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("Cipher text");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 230, 101, -1));

        plaintext.setColumns(20);
        plaintext.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        plaintext.setRows(5);
        jScrollPane1.setViewportView(plaintext);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(484, 370, 310, 62));

        cipherText.setColumns(20);
        cipherText.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cipherText.setRows(5);
        cipherText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cipherTextKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(cipherText);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(486, 265, 310, 62));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setText("Secret Key");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 150, 103, -1));

        secretKey.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        secretKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secretKeyActionPerformed(evt);
            }
        });
        jPanel1.add(secretKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 180, 130, 35));

        taille.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        taille.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "128", "192", "256" }));
        taille.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tailleActionPerformed(evt);
            }
        });
        jPanel1.add(taille, new org.netbeans.lib.awtextra.AbsoluteConstraints(716, 106, -1, -1));

        chooseFile.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        chooseFile.setText("Choose a  File");
        chooseFile.setEnabled(false);
        chooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileActionPerformed(evt);
            }
        });
        jPanel1.add(chooseFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 120, 130, 40));

        fileName.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jPanel1.add(fileName, new org.netbeans.lib.awtextra.AbsoluteConstraints(668, 176, 173, -1));

        formatDonnee.add(texteRadioButton1);
        texteRadioButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        texteRadioButton1.setSelected(true);
        texteRadioButton1.setText("Texte");
        texteRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texteRadioButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(texteRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 60, 80, -1));

        formatDonnee.add(fileRadioButton2);
        fileRadioButton2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        fileRadioButton2.setText("File");
        fileRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileRadioButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(fileRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 60, 98, -1));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setText("Choisir le format");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, -1, 30));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/diordiouf/images/icons8-left-48.png"))); // NOI18N
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -6, 60, 30));

        downloadButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        downloadButton1.setText("Download");
        downloadButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(downloadButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(685, 464, -1, -1));

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Save key");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 180, 130, 40));

        jPanel4.setBackground(new java.awt.Color(29, 190, 195));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 490, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(-19, 20, 110, 490));

        jPanel2.setBackground(new java.awt.Color(29, 190, 195));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 909, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 87, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(874, 607));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void algorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmActionPerformed
        // TODO add your handling code here:

        option = algorithm.getSelectedItem().toString();
        cipherText.setText("");
        plaintext.setText("");
        secretKey.setText("");
        if (option.equals("AES")) {
            taille.removeAllItems();
            taille.addItem("128");
            taille.addItem("192");
            taille.addItem("256");
            
            
        } else if(option.equals("DES")) {
                    taille.removeAllItems();
                    taille.addItem("56");
                    
        }
       
        System.out.println(option);

    }//GEN-LAST:event_algorithmActionPerformed

    private void encryptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptBtnActionPerformed
        // TODO add your handling code here:
        //get the plaintext
        if (format.equals("file")) {
            fileName.setText("");
            if (path==null) {
                JOptionPane.showConfirmDialog(this, "choisir un fichier d'abord", "erreur fichier", JOptionPane.CLOSED_OPTION,0);
                return;
            }
            if (sk==null) {
                JOptionPane.showConfirmDialog(this, "Générer une clé d'abord", "Vérifier la clé", JOptionPane.CLOSED_OPTION,0);
                    return;
                
            }
            if (file!=null) {
                
                try {
                   String encryptPath=path+"enc.txt";
                   CipherFile.encrypt(path,encryptPath , sk,option);
                    System.out.println(path+"enc.txt");
                   fileName.setText(Hachage.chemin(encryptPath));
                   path = encryptPath;
               } catch (Exception ex) {
                   Logger.getLogger(CipherSymetric.class.getName()).log(Level.SEVERE, null, ex);
               }
            }

            
        } else {
            
                String text = plaintext.getText();
                if (text.isEmpty()) {
                    JOptionPane.showConfirmDialog(this, "le texte ne doit pas être null", "Texte Vide Error", JOptionPane.CLOSED_OPTION,0);
                    return;
                }
                if (sk==null) {
                    JOptionPane.showConfirmDialog(this, "Générer une clé d'abord", "Vérifier la clé", JOptionPane.CLOSED_OPTION,0);
                    return;

                }
                
                if ("DES".equals(option)) {
                    try {
                        cipher = Chiffrement.cipherDES(text, sk);
                        cipherText.setText(cipher);
                        plaintext.setText("");
                    } catch (Exception ex) {
                        Logger.getLogger(CipherSymetric.class.getName()).log(Level.SEVERE, null, ex);
                    }


                } else {
                    try {
                        cipher = Chiffrement.encryptAlgo(text, sk);
                        cipherText.setText(cipher);
                        plaintext.setText("");
                    } catch (Exception ex) {
                        Logger.getLogger(CipherSymetric.class.getName()).log(Level.SEVERE, null, ex);
                }
                }

                }

    }//GEN-LAST:event_encryptBtnActionPerformed

    
    private void generateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateKeyActionPerformed
        // TODO add your handling code here:
        //algo = algorithm.getSelectedItem().toString();
        
        
        if ("DES".equals(option)) {
            try {
                sk=Chiffrement.genKeyDES(tailles);
                secretKey.setText(sk.getEncoded().toString());
            } catch (Exception ex) {
                Logger.getLogger(CipherSymetric.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        } else {
            try {
                sk = Chiffrement.genKey(option, tailles);
                secretKey.setText(sk.getEncoded().toString());
            } catch (Exception ex) {
                Logger.getLogger(CipherSymetric.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_generateKeyActionPerformed

    private void secretKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secretKeyActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_secretKeyActionPerformed

    private void decryptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptBtnActionPerformed
        
            // TODO add your handling code here:
            if (path==null) {
                JOptionPane.showConfirmDialog(this, "choisir un fichier d'abord", "erreur fichier", JOptionPane.CLOSED_OPTION,0);
                return;
            }
            if (sk==null) {
                    JOptionPane.showConfirmDialog(this, "Générer une clé d'abord", "Vérifier la clé", JOptionPane.CLOSED_OPTION,0);
                    return;
                    }
            if (format.equals("file")) {                
                if (file!=null){       
                    try {
                        String pathDecrypt = path+"decrypt.txt" ;
                        CipherFile.decrypt(path,pathDecrypt , sk,option);
                        fileName.setText(Hachage.chemin(pathDecrypt));
                        path = pathDecrypt;
                    } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IOException ex) {
                        Logger.getLogger(CipherSymetric.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            
            } else {
        
                    if (cipher.isEmpty()) {
                    JOptionPane.showConfirmDialog(this, "le texte ne doit pas être null", "Texte Vide Error", JOptionPane.CLOSED_OPTION,0);
                    return;
                    }
                    if (sk==null) {
                    JOptionPane.showConfirmDialog(this, "Générer une clé d'abord", "Vérifier la clé", JOptionPane.CLOSED_OPTION,0);
                    return;
                    }
                    if ("DES".equals(option)) {
                        if (cipher.equals(cipherText.getText())) {
                            try {
                                decipher = Chiffrement.decipherDES(cipher, sk);
                                plaintext.setText(decipher);
                                cipherText.setText("");
                            } catch (Exception ex) {
                                Logger.getLogger(CipherSymetric.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        } else {
                            JOptionPane.showConfirmDialog(this, "Votre chiffré est incorrecte", "Error Déchiffré", JOptionPane.CLOSED_OPTION, 0);
                        }

                    } else {
                            if (cipher.equals(cipherText.getText())) {
                                try {
                                    decipher = Chiffrement.decryptAlgo(cipher, sk);
                                    plaintext.setText(decipher);
                                    cipherText.setText("");
                                } catch (Exception ex) {
                                    Logger.getLogger(CipherSymetric.class.getName()).log(Level.SEVERE, null, ex);
                                }


                            } else {
                                JOptionPane.showConfirmDialog(this, "Votre chiffré est incorrecte", "Error Déchiffré", JOptionPane.CLOSED_OPTION, 0);
                            }
                    }
                }
    
    }//GEN-LAST:event_decryptBtnActionPerformed

    private void tailleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tailleActionPerformed
        // TODO add your handling code here:
        if(taille.getSelectedItem()!=null)
        tailles = Integer.parseInt(taille.getSelectedItem().toString());
        
    }//GEN-LAST:event_tailleActionPerformed

    private void cipherTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cipherTextKeyReleased
        // TODO add your handling code here:
       
    }//GEN-LAST:event_cipherTextKeyReleased

    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileActionPerformed
        // TODO add your handling code here:
        
        
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.showOpenDialog(null);
        if (jFileChooser.getSelectedFile()!=null) {          
            file = jFileChooser.getSelectedFile();
            path = file.getAbsolutePath();
            fileName.setText(file.getName());
           
        }
   
    }//GEN-LAST:event_chooseFileActionPerformed

    private void texteRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texteRadioButton1ActionPerformed
        // TODO add your handling code here:
        format= "texte";
        plaintext.setEnabled(true);
        cipherText.setEnabled(true);
        chooseFile.setEnabled(false);
        encryptBtn.setText("Encrypt");
         decryptBtn.setText("Decrypt");
        
        
    }//GEN-LAST:event_texteRadioButton1ActionPerformed

    private void fileRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileRadioButton2ActionPerformed
        // TODO add your handling code here:
        format = "file";
        plaintext.setEnabled(false);
        cipherText.setEnabled(false);
        chooseFile.setEnabled(true);
         encryptBtn.setText("Encrypt file");
         decryptBtn.setText("Decrypt File");
            
    }//GEN-LAST:event_fileRadioButton2ActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:
        
        Home h = new Home();
        this.setVisible(false);
        h.setVisible(true);
    }//GEN-LAST:event_jLabel6MouseClicked

    private void downloadButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButton1ActionPerformed
        // TODO add your handling code here:
        
        
         try {
            File fileToDownload = new File(path);

            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setSelectedFile(fileToDownload);
            int returnValue = fileChooser.showSaveDialog(null);

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                if (!selectedFile.exists()) {
                    
                
                FileInputStream inputStream = new FileInputStream(fileToDownload);
                FileOutputStream outputStream = new FileOutputStream(selectedFile);

                byte[] buffer = new byte[1024];
                int bytesRead;
                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);
                }
                

                inputStream.close();
                outputStream.close();
                
            }
                JOptionPane.showMessageDialog(null, "File downloaded successfully.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error downloading file: " + e.getMessage());
        }
    
    }//GEN-LAST:event_downloadButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                // TODO add your handling code here:
                SaveKey saveKey = new SaveKey();              
                saveKey.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CipherSymetric.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CipherSymetric.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CipherSymetric.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CipherSymetric.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CipherSymetric().setVisible(true);
                
                
            }
        });
        
        
    }
    
    private String path;
    private String path1;
    private String format = "texte";
    private SecretKey sk = null;
    private String cipher = "";
    private String decipher = "";
    private String option = "AES";
    private int tailles=128;
    private File file;
    
        
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> algorithm;
    private javax.swing.JButton chooseFile;
    private javax.swing.JTextArea cipherText;
    private javax.swing.JButton decryptBtn;
    private javax.swing.JButton downloadButton1;
    private javax.swing.JButton encryptBtn;
    private javax.swing.JLabel fileName;
    private javax.swing.JRadioButton fileRadioButton2;
    private javax.swing.ButtonGroup formatDonnee;
    private javax.swing.JButton generateKey;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea plaintext;
    private javax.swing.JTextField secretKey;
    private javax.swing.JComboBox<String> taille;
    private javax.swing.JRadioButton texteRadioButton1;
    // End of variables declaration//GEN-END:variables
}
